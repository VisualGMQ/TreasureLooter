rapidxml::xml_node<>* Serialize(rapidxml::xml_document<>& doc,
                                const {{type}}& payload,
                                const std::string& name) {
    auto node = doc.allocate_node(rapidxml::node_type::node_element, doc.allocate_string(name.c_str()));
    {{#properties}}
    {
        auto prop_node = Serialize(doc, payload.m_{{{property}}}, "{{{property}}}");
        if (prop_node) {
            node->append_node(prop_node);
        }
    }
    {{/properties}}
    return node;
}

void Deserialize(const rapidxml::xml_node<>& node, {{type}}& payload) {
    {{#properties}}
    {
        auto prop_node = node.first_node("{{{property}}}");
        if (!prop_node) {
            if (!{{is_optional}}) {
                LOGE("[Deserialize] parse {{{type}}}::m_{{{property}}} failed: no this node");
            }
        } else {
            Deserialize(*prop_node, payload.m_{{{property}}});
        }
    }
    {{/properties}}
}

{{#has_handle}}
rapidxml::xml_node<>* Serialize(rapidxml::xml_document<>& doc,
                                const {{type}}Handle& payload,
                                const std::string& name) {
    return Serialize(doc, *payload, name);
}

void Deserialize(const rapidxml::xml_node<>& node, {{type}}Handle& payload) {
    Deserialize(node, *payload);
}
{{/has_handle}}
