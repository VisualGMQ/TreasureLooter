{{type}} Load{{type}}Asset(rapidxml::xml_node<>& node) {
    {{type}} payload;
    Deserialize(node, payload);
    return payload;
}

rapidxml::xml_node<>* SaveAsset(rapidxml::xml_document<>& doc, const {{type}}& payload) {
    return Serialize(doc, payload, "{{type}}");
}

{{type}} Load{{type}}Asset(const Path& filename) {
    auto file = IOStream::CreateFromFile(filename, IOMode::Read, true);
    auto content = file->Read();
    content.push_back('\0');
    rapidxml::xml_document<> doc;
    try {
        doc.parse<rapidxml::parse_default>(content.data());
    } catch (std::exception &e) {
        LOGE("parse asset {} failed: {}", filename, e.what());
    }
    auto node = doc.first_node("{{type}}");
    if (!node) {
        LOGE("parse asset {} failed, no node {}", filename, "{{type}}");
    }
    return Load{{type}}Asset(*node);
}

void SaveAsset(const {{type}}& payload, const Path& filename) {
    rapidxml::xml_document<> doc;
    auto node = SaveAsset(doc, payload);    
    if (!node) {
        LOGE("save asset {} failed", filename);
    }
    doc.append_node(node);
    std::stringstream ss;
    ss << doc;
    std::string content = ss.str();
    auto io = IOStream::CreateFromFile(filename, IOMode::Write, false, true);
    io->Write(content.data(), content.size());
}